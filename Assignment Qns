//Qn: converting an adjacency matrix to an adjacency list

#include <stdio.h>
#include <stdlib.h>

enum GraphType {ADJ_MATRIX, ADJ_LIST}; // Types of Graph Representation

typedef struct _listnode
{
    int vertex;
	struct _listnode *next;
} ListNode;

struct GraphForm{
    int **matrix;
    ListNode **list;
};

typedef struct _graph{
    int V;
    int E;
    enum GraphType type;
    struct GraphForm adj;
}Graph;

void printGraphMatrix(Graph );
void calDegreeV(Graph,int *);
void printDegreeV(int *,int );

int main()
{
    Graph g;
    int i,j;

    int* degreeV;

    printf("Enter the number of vertices:\n");
    scanf("%d",&g.V);

    g.E = 0;
    g.adj.matrix = (int **)malloc(g.V*sizeof(int *));
    for(i=0;i<g.V;i++)
        g.adj.matrix[i] = (int *)malloc(g.V*sizeof(int));

    for(i=0;i<g.V;i++)
        for(j=0;j<g.V;j++)
            g.adj.matrix[i][j] = 0;
    g.type = ADJ_MATRIX;

    degreeV = (int *) malloc(g.V*sizeof(int));
    for(i=0;i<g.V;i++)
        degreeV[i]=0;

    int V1, V2;
    printf("Enter two vertices which are adjacent to each other: (enter a to stop)\n");
    while(scanf("%d %d",&V1,&V2)==2)
    {
        if(V1>0 && V1<=g.V && V2>0 && V2<=g.V)
        {
            g.adj.matrix[V1-1][V2-1] = 1;
            g.adj.matrix[V2-1][V1-1] = 1;
            g.E++;
        }
        else
            break;
        printf("Enter two vertices which are adjacent to each other: (enter a to stop)\n");
    }


    printGraphMatrix(g);

    calDegreeV(g,degreeV);
    
    printDegreeV(degreeV,g.V);

    return 0;
}

void printGraphMatrix(Graph g)
{
    int i,j;
    printf("Print graph matrix \n");
    if(g.type == ADJ_LIST) {printf("Error"); return;}
    
    for(i=0;i<g.V;i++){
        for(j=0;j<g.V;j++)
            printf("%d\t",g.adj.matrix[i][j]);
        printf("\n");
    }
    printf("\n");

}

int i,j; 
    ListNode **list; 
    ListNode *temp;

    if(g->type == ADJ_LIST) {printf("Error"); return;}
    if(g->V<=0){printf("Empty graph!"); return;}

    list = (ListNode **) malloc(g->V*sizeof(ListNode *));
    for(i=0;i<g->V;i++)
        list[i] = NULL;

    for(i=0;i<g->V;i++){
        for(j=0;j<g->V;j++){
            if(g->adj.matrix[i][j]==1){
                if(list[i]==NULL){
                    list[i] = (ListNode *)malloc(sizeof(ListNode));
                    list[i]->vertex = j+1; //DONT FORGET J+1
                    list[i]->next = NULL;
                    temp = list[i];
                }
                else{
                    temp->next = (ListNode *)malloc(sizeof(ListNode));
                    temp->next->vertex = j+1;
                    temp->next->next =NULL;
                    temp = temp->next;
                }
            }
        }
    }
    
    g->type = ADJ_LIST; //change representation form

    //free adjMatrix
    for(i=0;i<g->V;i++)
        free(g->adj.matrix[i]);
    free(g->adj.matrix);

    g->adj.list = list;



void adjM2adjL(Graph *g) 
{   
    int i,j; 
    ListNode **list; 
    ListNode *temp; 

    if(g->type == ADJ_LIST) {printf("Error"); return;} 
    if(g->V<=0){printf("Empty graph!"); return;}
    

    list = (ListNode **) malloc(g->V*sizeof(ListNode *)); 
    for(i=0;i<g->V;i++)
        list[i] = NULL; 
    for(i=0;i<g->V;i++){
        for(j=0;j<g->V;j++){ 
                if(list[i]==NULL){
                    list[i] = (ListNode *)malloc(sizeof(ListNode)); 
                    list[i]->vertex = j+1; 
                    list[i]->next = NULL; 
                    temp = list[i]; 
                }
                else{ 
                    temp->next = (ListNode *)malloc(sizeof(ListNode)); 
                    temp->next->vertex = j+1; 
                    temp->next->next =NULL; 
                    temp = temp->next; 
                }
            }
        }
    }
    
    g->type = ADJ_LIST; 

    
    for(i=0;i<g->V;i++)
        free(g->adj.matrix[i]); 
    free(g->adj.matrix);

    g->adj.list = list; 

}


//Qn: Backtracking in a graph Coloring qn 

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

// Number of vertices in the graph

int count = 0; // count the number of solutions
int V; //number of regions

/* A utility function to print solution */
void printSolution(int* color)
{
    printf(
        "Solution Exists:"
        " Following are the assigned colors \n");
    for (int i = 0; i < V; i++)
        printf(" %d ", color[i]);
    printf("\n");
}
 
/* A utility function to check if
   the current color assignment
   is safe for vertex v i.e. checks
   whether the edge exists or not
   (i.e, graph[v][i]==1). If exist
   then checks whether the color to
   be filled in the new vertex(c is
   sent in the parameter) is already
   used by its adjacent
   vertices(i-->adj vertices) or
   not (i.e, color[i]==c) */
int isSafe(
    int v, int** graph,
    int* color, int c)
{
    for (int i = 0; i < V; i++)
        if (graph[v][i] && c == color[i]) //if there exists an edge between v and i and the color c has been used by an i before, then return 0
            return 0;
    return 1;
}
 
/* A backtracking function
to solve m coloring problem */
int graphColoring(
    int** graph, int m,
    int* color, int v)
{
    //so for every region uw check if its safe to colour the region in a particular way




    if (v==V) {
        count++;
        return 1;
    }
    

    for (int c = 1; c<=m; c++) {
        if (isSafe(
    v, graph,
    color, c)) {
        color[v] = c;

    graphColoring(graph, m, color, v+1);
    color[v]=0; 
    } 
    }
    return 0;
}


int main()
{
    int m;
    int **graph;
    int *color;
    
    printf("Enter number of colors:\n");
    scanf("%d",&m);
    
    printf("Enter number of regions:\n");
    scanf("%d",&V);
    
    int i,j;
    color = (int *) malloc(V*sizeof(int));
    graph = (int **) malloc(V*sizeof(int *));
    
    for (i=0;i<V;i++)
        graph[i] = (int *) malloc(V*sizeof(int));
    
    printf("Input the adjacency matrix:\n");
    for (i = 0; i < V; i++)
        for (j = 0; j < V; j++)
             scanf("%d",&graph[i][j]);
    
 
    // Initialize all color values as 0.
    for (i = 0; i < V; i++)
        color[i] = 0;
 
    graphColoring(graph, m, color, 0);
        
    printf("There is/are total %d solution(s)", count);
    return 0;
}

//Qn: on bottom up dynamic programming

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>


int bottom_up_dp(int n, int *s, int *v, int C)
{
   
    int **M = (int **) malloc((n+1) * sizeof(int *));
    for (int i =0; i<=n;i++) { 
        M[i] = (int*) malloc((C+1) * sizeof(int)); 

    }

    for (int i=0 ; i<=n; i++) { 
        for (int j=0; j<=C; j++) { 
            if (i==0 || j==0) { 
                M[i][j] = 0; 
            } else if (s[i] <= j) { 
                M[i][j] = (M[i-1][j] > (M[i -1][j-s[i]] + v[i])) ? M[i-1][j] : (M[i -1][j-s[i]] + v[i]); 
            } else {  
                M[i][j] = M[i-1][j]; 
            }
        }
    }
    
    int res = M[n][C]; 

    for (int i=0; i<=n; i++) { 
        free(M[i]);
    }
    free(M);
    return res; 
}

 
int main ()
{
    int n,C;
    int function;
    int *s;
    int *v;
    int i,j;
    printf("Enter the number of items n:\n");
    scanf("%d",&n);
    printf("Enter the capacity C:\n");
    scanf("%d",&C);
    s = (int *) malloc(sizeof(int) * (n+1));
    v = (int *) malloc(sizeof(int) * (n+1));
    
    printf("Enter the sizes of items (as a list, separate by spacing:\n");
    for (i=1;i<=n;i++)
        scanf("%d",&s[i]);
        
    printf("Enter the values of items (as a list, separate by spacing:\n");
    for (i=1;i<=n;i++)
        scanf("%d",&v[i]);
    
    printf("The maximum value is: %d \n", bottom_up_dp(n,s,v,C));
        
}

//Connected graph

int Connected(Graph g)
{
    void dfs(Graph *g, int startVertex) { 
        Stack s = {0, NULL}; 
        push(&s, startVertex); 

        g->visited[startVertex] = 1;

        while (!isEmptyStack(s)) { 
            int vertex = peek(s); 
            for (int i = 0; i < g->V; i++) { 
                if (g->matrix[vertex][i] == 1 && !g->visited[i]) {
                    push(&s, i);
                    g->visited[i] = 1; 
                }
            }
        }
    }

    
    for (int i = 0; i < g.V; i++) { 
        g.visited[i] = 0;
    }


    dfs(&g, 0);

    
    for (int i = 0; i < g.V; i++) { 
        if (!g.visited[i]) { 
            return 0; 
        }
    }

    return 1; 
}


//Hash Search and Hash delete functions in Hash table

#include <stdio.h>
#include <stdlib.h>

typedef struct _listnode{
    int key;
    struct _listnode *next;
} ListNode;

typedef struct _linkedlist{
   int size;
   ListNode *head;
} HashTableNode;

typedef struct _hashTable{
   int hSize; //size of hash table
   int nSize; //number of inserted keys
   HashTableNode *Table;
} HashTable;

int Hash(int,int);

ListNode* HashSearch(HashTable, int);
int HashInsert(HashTable *, int);
int HashDelete(HashTable*, int);

//In Practice, we will not do it
void HashPrint(HashTable);

int main()
{
    int opt;
    int size;

    int i;
    int key;

    //Create a HashTable
    HashTable Q3Hash;
    Q3Hash.hSize = 0; 
    Q3Hash.nSize = 0; 
    Q3Hash.Table = NULL;

    printf("============= Hash Table ============\n");
    printf("|1. Create a hash table             |\n");
    printf("|2. Insert a key to the hash table  |\n");
    printf("|3. Search a key in the hash table  |\n");
    printf("|4. Delete a key in the hash table  |\n");
    printf("|5. Print the hash table            |\n");
    printf("|6. Quit                            |\n");
    printf("=====================================\n");

    printf("Enter selection: ");
    scanf("%d",&opt);
    while(opt>=1 && opt <=5){
        switch(opt){
        case 1:
            printf("Enter the size of hash table:\n");
            scanf("%d",&Q3Hash.hSize);

            Q3Hash.nSize = 0;

            Q3Hash.Table = (HashTableNode *) malloc(sizeof(HashTableNode)*(Q3Hash.hSize));

            for(i=0;i<Q3Hash.hSize;i++){
               Q3Hash.Table[i].head = NULL;
               Q3Hash.Table[i].size = 0;
            }
            printf("HashTable is created.\n");
            break;
        case 2: //Insertion
            printf("Enter a key to be inserted:\n");
            scanf("%d",&key);

            if(HashInsert(&Q3Hash,key))
                printf("%d is inserted.\n",key);
            else
                printf("%d is a duplicate. No key is inserted.\n",key);
            break;
        case 3: //Search
            printf("Enter a key for searching in the HashTable:\n");
            scanf("%d",&key);
            ListNode* node = HashSearch(Q3Hash, key);

            if(node!=NULL)
                printf("%d is found.\n",key);
            else
                printf("%d is not found.\n",key);
            break;
        case 4: //Deletion
            printf("Enter a key to be deleted:\n");
            scanf("%d",&key);
            if(HashDelete(&Q3Hash,key))
                printf("%d is deleted.\n",key);
            else
                printf("%d is not existing.\n",key);
            break;
        case 5:
            HashPrint(Q3Hash);
            break;
        }

    printf("Enter selection: ");
    scanf("%d",&opt);
    }

    for(i=0;i<Q3Hash.hSize;i++)
    {
        while(Q3Hash.Table[i].head)
        {
            ListNode *temp;
            temp = Q3Hash.Table[i].head;
            Q3Hash.Table[i].head = Q3Hash.Table[i].head->next;
            free(temp);
        }
    }
    free(Q3Hash.Table);

    return 0;

}

int Hash(int key,int hSize)
{
    return key%hSize;
}

ListNode* HashSearch(HashTable Q3Hash, int key)
{

   
    int index;

    ListNode *temp;

    if(Q3Hash.hSize!=0)
      index = Hash(key,Q3Hash.hSize);
    else
      return NULL;

    temp = Q3Hash.Table[index].head;
    while(temp !=NULL){
        if(temp->key == key)
            return temp;
        temp = temp->next;
    }
    return NULL;
}

int HashInsert(HashTable* Q3HashPtr, int key)
{
    int index;
    ListNode *newNode;

    if(HashSearch(*Q3HashPtr, key)!=NULL)   
        return 0;

    if(Q3HashPtr->hSize!=0)
        index  = Hash(key,Q3HashPtr->hSize);

    
    newNode = (ListNode *) malloc(sizeof(ListNode));
    newNode->key = key;
    newNode->next= Q3HashPtr->Table[index].head;
    Q3HashPtr->Table[index].head = newNode;

    Q3HashPtr->Table[index].size++;
    Q3HashPtr->nSize++;

    return 1; //insertion is done successfully

}

int HashDelete(HashTable* Q3HashPtr, int key)
{
    int index;
    ListNode* temp1;
    ListNode* temp2;

    if (HashSearch(*Q3HashPtr, key) == NULL) 
    return 0;

    if (Q3HashPtr->hSize!=0)
    index = Hash(key, Q3HashPtr->hSize);

    temp1 = (ListNode*) malloc(sizeof(ListNode)); 
    temp2 = (ListNode*) malloc(sizeof(ListNode)); 

    temp2 = Q3HashPtr->Table[index].head;
    temp1 = temp2->next; 

    while (temp != NULL) {
        if (temp1->key == key) {  
            if (temp2 == NULL) {
                Q3HashPtr->Table[index].head = temp1->next; 
            } else {
                temp2->next = temp1->next; 
            }

            free(temp1);  
            Q3HashPtr->Table[index].size--;  
            Q3HashPtr->nSize--;              
            return 1;  // Indicate successful deletion
        }
        
        temp2 = temp1; 
        temp1 = temp1->next;
    }
    return 0;  // Key was not found in the list

        
}

void HashPrint(HashTable Q3Hash)
{
    int i;
    ListNode *temp;
    for(i=0;i<Q3Hash.hSize;i++)
    {
        temp =Q3Hash.Table[i].head;
        printf("%d:  ",i);
        while(temp !=NULL)
        {
            printf("%d -> ", temp->key);
            temp = temp->next;
        }
        printf("\n");
    }
}
